# LowKey™ - Primal Genesis Engine™ Edition
# Docker Compose configuration for local development and testing

version: '3.8'

services:
  # Main application
  lowkey-app:
    build:
      context: .
      target: development
    container_name: lowkey-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://lowkey_user:lowkey_password@postgres:5432/lowkey_db
      - REDIS_URL=redis://redis:6379
      - PRIMAL_GENESIS_AUTHORITY=primary
      - QUANTUM_PROCESSING_ENABLED=true
      - USER_OVERRIDE_AUTHORITY=ultimate
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - postgres
      - redis
    networks:
      - lowkey-network
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: lowkey-postgres
    environment:
      - POSTGRES_DB=lowkey_db
      - POSTGRES_USER=lowkey_user
      - POSTGRES_PASSWORD=lowkey_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - lowkey-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lowkey_user -d lowkey_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: lowkey-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lowkey-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for additional data storage
  mongodb:
    image: mongo:6
    container_name: lowkey-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=lowkey_admin
      - MONGO_INITDB_ROOT_PASSWORD=lowkey_admin_password
      - MONGO_INITDB_DATABASE=lowkey_analytics
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - lowkey-network
    restart: unless-stopped

  # Elasticsearch for search and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: lowkey-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - lowkey-network
    restart: unless-stopped

  # Kibana for Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: lowkey-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - lowkey-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: lowkey-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - lowkey-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: lowkey-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=lowkey_admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - lowkey-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: lowkey-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - lowkey-app
    networks:
      - lowkey-network
    restart: unless-stopped

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: lowkey-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - lowkey-network
    restart: unless-stopped

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: lowkey-minio
    environment:
      - MINIO_ROOT_USER=lowkey_admin
      - MINIO_ROOT_PASSWORD=lowkey_admin_password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - lowkey-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: lowkey-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - lowkey-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

networks:
  lowkey-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 